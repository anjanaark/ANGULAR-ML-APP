// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { Component, Input, ViewChild } from '@angular/core';
import { PowerBIEmbedComponent } from '../powerbi-embed/powerbi-embed.component';
/**
 * Paginated report component to embed the entity, extends the Base component
 */
export class PowerBIPaginatedReportEmbedComponent extends PowerBIEmbedComponent {
    constructor() {
        super();
    }
    // Getter for this._embed
    get embed() {
        return this._embed;
    }
    // Setter for this._embed
    set embed(newEmbedInstance) {
        this._embed = newEmbedInstance;
    }
    ngOnInit() {
        // Initialize PowerBI service instance variable from parent
        super.ngOnInit();
    }
    ngOnChanges(changes) {
        if (changes.embedConfig) {
            const prevEmbedConfig = changes.embedConfig.previousValue;
            // Check if the function is being called for the first time
            if (!prevEmbedConfig) {
                return;
            }
            // Input from parent get updated, thus call embedOrUpdateDashboard function
            this.embedOrUpdatedPaginatedReport(prevEmbedConfig);
        }
    }
    ngAfterViewInit() {
        // Check if container exists on the UI
        if (this.containerRef.nativeElement) {
            // Decide to embed
            this.embedPaginatedReport();
        }
    }
    /**
     * Embed the PowerBI Paginated report
     *
     * @returns void
     */
    embedPaginatedReport() {
        // Check if the HTML container is rendered and available
        if (!this.containerRef.nativeElement) {
            return;
        }
        // Embed paginated report
        this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);
    }
    /**
     * When component updates, choose to _embed_ the powerbi paginated report
     * or do nothing if the embedUrl and accessToken did not update in the new properties
     *
     * @param prevEmbedConfig IEmbedConfiguration
     * @returns void
     */
    embedOrUpdatedPaginatedReport(prevEmbedConfig) {
        // Check if Embed URL and Access Token are present in current properties
        if (!this.embedConfig.accessToken || !this.embedConfig.embedUrl) {
            return;
        }
        // Embed in the following scenario
        // Embed URL is updated (E.g. New paginated report is to be embedded)
        if (this.containerRef.nativeElement && this.embedConfig.embedUrl !== prevEmbedConfig.embedUrl) {
            this.embedPaginatedReport();
        }
    }
}
PowerBIPaginatedReportEmbedComponent.decorators = [
    { type: Component, args: [{
                selector: 'powerbi-paginated-report[embedConfig]',
                template: '<div class={{cssClassName}} #paginatedReportContainer></div>'
            },] }
];
PowerBIPaginatedReportEmbedComponent.ctorParameters = () => [];
PowerBIPaginatedReportEmbedComponent.propDecorators = {
    embedConfig: [{ type: Input }],
    containerRef: [{ type: ViewChild, args: ['paginatedReportContainer',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG93ZXJiaS1wYWdpbmF0ZWQtcmVwb3J0LWVtYmVkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Bvd2VyYmktY2xpZW50LWFuZ3VsYXIvc3JjL2NvbXBvbmVudHMvcG93ZXJiaS1wYWdpbmF0ZWQtcmVwb3J0LWVtYmVkL3Bvd2VyYmktcGFnaW5hdGVkLXJlcG9ydC1lbWJlZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUVsQyxPQUFPLEVBQWlCLFNBQVMsRUFBYyxLQUFLLEVBQW9DLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6SCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUVqRjs7R0FFRztBQUtILE1BQU0sT0FBTyxvQ0FBcUMsU0FBUSxxQkFBcUI7SUFzQjdFO1FBQ0UsS0FBSyxFQUFFLENBQUM7SUFDVixDQUFDO0lBWkQseUJBQXlCO0lBQ3pCLElBQVksS0FBSztRQUNmLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQseUJBQXlCO0lBQ3pCLElBQVksS0FBSyxDQUFDLGdCQUFtQztRQUNuRCxJQUFJLENBQUMsTUFBTSxHQUFHLGdCQUFnQixDQUFDO0lBQ2pDLENBQUM7SUFNRCxRQUFRO1FBQ04sMkRBQTJEO1FBQzNELEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLFdBQVcsRUFBRTtZQUN2QixNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLGFBQW9DLENBQUM7WUFFakYsMkRBQTJEO1lBQzNELElBQUksQ0FBQyxlQUFlLEVBQUU7Z0JBQ3BCLE9BQU87YUFDUjtZQUVELDJFQUEyRTtZQUMzRSxJQUFJLENBQUMsNkJBQTZCLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDckQ7SUFDSCxDQUFDO0lBRUQsZUFBZTtRQUNiLHNDQUFzQztRQUN0QyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFO1lBQ25DLGtCQUFrQjtZQUNsQixJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztTQUM3QjtJQUNILENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssb0JBQW9CO1FBQzFCLHdEQUF3RDtRQUN4RCxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUU7WUFDcEMsT0FBTztTQUNSO1FBRUQseUJBQXlCO1FBQ3pCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSyw2QkFBNkIsQ0FBQyxlQUFvQztRQUN4RSx3RUFBd0U7UUFDeEUsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUU7WUFDL0QsT0FBTztTQUNSO1FBRUQsa0NBQWtDO1FBQ2xDLHFFQUFxRTtRQUNyRSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxLQUFLLGVBQWUsQ0FBQyxRQUFRLEVBQUU7WUFDN0YsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7U0FDN0I7SUFDSCxDQUFDOzs7WUExRkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx1Q0FBdUM7Z0JBQ2pELFFBQVEsRUFBRSw4REFBOEQ7YUFDekU7Ozs7MEJBSUUsS0FBSzsyQkFHTCxTQUFTLFNBQUMsMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuXHJcbmltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBTaW1wbGVDaGFuZ2VzLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRW1iZWQsIElFbWJlZENvbmZpZ3VyYXRpb24gfSBmcm9tICdwb3dlcmJpLWNsaWVudCc7XHJcbmltcG9ydCB7IFBvd2VyQklFbWJlZENvbXBvbmVudCB9IGZyb20gJy4uL3Bvd2VyYmktZW1iZWQvcG93ZXJiaS1lbWJlZC5jb21wb25lbnQnO1xyXG5cclxuLyoqXHJcbiAqIFBhZ2luYXRlZCByZXBvcnQgY29tcG9uZW50IHRvIGVtYmVkIHRoZSBlbnRpdHksIGV4dGVuZHMgdGhlIEJhc2UgY29tcG9uZW50XHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3Bvd2VyYmktcGFnaW5hdGVkLXJlcG9ydFtlbWJlZENvbmZpZ10nLFxyXG4gIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz17e2Nzc0NsYXNzTmFtZX19ICNwYWdpbmF0ZWRSZXBvcnRDb250YWluZXI+PC9kaXY+JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFBvd2VyQklQYWdpbmF0ZWRSZXBvcnRFbWJlZENvbXBvbmVudCBleHRlbmRzIFBvd2VyQklFbWJlZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0IHtcclxuICAvLyBJbnB1dCgpIHNwZWNpZnkgcHJvcGVydGllcyB0aGF0IHdpbGwgYmUgcGFzc2VkIGZyb20gcGFyZW50XHJcbiAgLy8gQ29uZmlndXJhdGlvbiBmb3IgZW1iZWRkaW5nIHRoZSBQb3dlckJJIFBhZ2luYXRlZCByZXBvcnQgKFJlcXVpcmVkKVxyXG4gIEBJbnB1dCgpIGVtYmVkQ29uZmlnITogSUVtYmVkQ29uZmlndXJhdGlvbjtcclxuXHJcbiAgLy8gUmVmIHRvIHRoZSBIVE1MIGRpdiBjb250YWluZXIgZWxlbWVudFxyXG4gIEBWaWV3Q2hpbGQoJ3BhZ2luYXRlZFJlcG9ydENvbnRhaW5lcicpIHByaXZhdGUgY29udGFpbmVyUmVmITogRWxlbWVudFJlZjxIVE1MRGl2RWxlbWVudD47XHJcblxyXG4gIC8vIEVtYmVkZGVkIGVudGl0eVxyXG4gIC8vIE5vdGU6IERvIG5vdCByZWFkIG9yIGFzc2lnbiB0byB0aGlzIG1lbWJlciB2YXJpYWJsZSBkaXJlY3RseSwgaW5zdGVhZCB1c2UgdGhlIGdldHRlciBhbmQgc2V0dGVyXHJcbiAgcHJpdmF0ZSBfZW1iZWQ/OiBFbWJlZDtcclxuXHJcbiAgLy8gR2V0dGVyIGZvciB0aGlzLl9lbWJlZFxyXG4gIHByaXZhdGUgZ2V0IGVtYmVkKCk6IEVtYmVkIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLl9lbWJlZDtcclxuICB9XHJcblxyXG4gIC8vIFNldHRlciBmb3IgdGhpcy5fZW1iZWRcclxuICBwcml2YXRlIHNldCBlbWJlZChuZXdFbWJlZEluc3RhbmNlOiBFbWJlZCB8IHVuZGVmaW5lZCkge1xyXG4gICAgdGhpcy5fZW1iZWQgPSBuZXdFbWJlZEluc3RhbmNlO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAvLyBJbml0aWFsaXplIFBvd2VyQkkgc2VydmljZSBpbnN0YW5jZSB2YXJpYWJsZSBmcm9tIHBhcmVudFxyXG4gICAgc3VwZXIubmdPbkluaXQoKTtcclxuICB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIGlmIChjaGFuZ2VzLmVtYmVkQ29uZmlnKSB7XHJcbiAgICAgIGNvbnN0IHByZXZFbWJlZENvbmZpZyA9IGNoYW5nZXMuZW1iZWRDb25maWcucHJldmlvdXNWYWx1ZSBhcyBJRW1iZWRDb25maWd1cmF0aW9uO1xyXG5cclxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGZ1bmN0aW9uIGlzIGJlaW5nIGNhbGxlZCBmb3IgdGhlIGZpcnN0IHRpbWVcclxuICAgICAgaWYgKCFwcmV2RW1iZWRDb25maWcpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIElucHV0IGZyb20gcGFyZW50IGdldCB1cGRhdGVkLCB0aHVzIGNhbGwgZW1iZWRPclVwZGF0ZURhc2hib2FyZCBmdW5jdGlvblxyXG4gICAgICB0aGlzLmVtYmVkT3JVcGRhdGVkUGFnaW5hdGVkUmVwb3J0KHByZXZFbWJlZENvbmZpZyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICAvLyBDaGVjayBpZiBjb250YWluZXIgZXhpc3RzIG9uIHRoZSBVSVxyXG4gICAgaWYgKHRoaXMuY29udGFpbmVyUmVmLm5hdGl2ZUVsZW1lbnQpIHtcclxuICAgICAgLy8gRGVjaWRlIHRvIGVtYmVkXHJcbiAgICAgIHRoaXMuZW1iZWRQYWdpbmF0ZWRSZXBvcnQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEVtYmVkIHRoZSBQb3dlckJJIFBhZ2luYXRlZCByZXBvcnRcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHZvaWRcclxuICAgKi9cclxuICBwcml2YXRlIGVtYmVkUGFnaW5hdGVkUmVwb3J0KCk6IHZvaWQge1xyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIEhUTUwgY29udGFpbmVyIGlzIHJlbmRlcmVkIGFuZCBhdmFpbGFibGVcclxuICAgIGlmICghdGhpcy5jb250YWluZXJSZWYubmF0aXZlRWxlbWVudCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRW1iZWQgcGFnaW5hdGVkIHJlcG9ydFxyXG4gICAgdGhpcy5lbWJlZCA9IHRoaXMucG93ZXJiaS5lbWJlZCh0aGlzLmNvbnRhaW5lclJlZi5uYXRpdmVFbGVtZW50LCB0aGlzLmVtYmVkQ29uZmlnKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFdoZW4gY29tcG9uZW50IHVwZGF0ZXMsIGNob29zZSB0byBfZW1iZWRfIHRoZSBwb3dlcmJpIHBhZ2luYXRlZCByZXBvcnRcclxuICAgKiBvciBkbyBub3RoaW5nIGlmIHRoZSBlbWJlZFVybCBhbmQgYWNjZXNzVG9rZW4gZGlkIG5vdCB1cGRhdGUgaW4gdGhlIG5ldyBwcm9wZXJ0aWVzXHJcbiAgICpcclxuICAgKiBAcGFyYW0gcHJldkVtYmVkQ29uZmlnIElFbWJlZENvbmZpZ3VyYXRpb25cclxuICAgKiBAcmV0dXJucyB2b2lkXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBlbWJlZE9yVXBkYXRlZFBhZ2luYXRlZFJlcG9ydChwcmV2RW1iZWRDb25maWc6IElFbWJlZENvbmZpZ3VyYXRpb24pOiB2b2lkIHtcclxuICAgIC8vIENoZWNrIGlmIEVtYmVkIFVSTCBhbmQgQWNjZXNzIFRva2VuIGFyZSBwcmVzZW50IGluIGN1cnJlbnQgcHJvcGVydGllc1xyXG4gICAgaWYgKCF0aGlzLmVtYmVkQ29uZmlnLmFjY2Vzc1Rva2VuIHx8ICF0aGlzLmVtYmVkQ29uZmlnLmVtYmVkVXJsKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFbWJlZCBpbiB0aGUgZm9sbG93aW5nIHNjZW5hcmlvXHJcbiAgICAvLyBFbWJlZCBVUkwgaXMgdXBkYXRlZCAoRS5nLiBOZXcgcGFnaW5hdGVkIHJlcG9ydCBpcyB0byBiZSBlbWJlZGRlZClcclxuICAgIGlmICh0aGlzLmNvbnRhaW5lclJlZi5uYXRpdmVFbGVtZW50ICYmIHRoaXMuZW1iZWRDb25maWcuZW1iZWRVcmwgIT09IHByZXZFbWJlZENvbmZpZy5lbWJlZFVybCkge1xyXG4gICAgICB0aGlzLmVtYmVkUGFnaW5hdGVkUmVwb3J0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==