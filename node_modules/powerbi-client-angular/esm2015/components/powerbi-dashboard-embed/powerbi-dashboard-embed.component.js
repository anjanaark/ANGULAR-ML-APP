// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { Component, Input, ViewChild } from '@angular/core';
import { PowerBIEmbedComponent } from '../powerbi-embed/powerbi-embed.component';
/**
 * Dashboard component to embed the dashboard, extends the Base component
 */
export class PowerBIDashboardEmbedComponent extends PowerBIEmbedComponent {
    constructor() {
        super();
    }
    // Getter for this._embed
    get embed() {
        return this._embed;
    }
    // Setter for this._embed
    set embed(newEmbedInstance) {
        this._embed = newEmbedInstance;
    }
    // Returns embed object to calling function
    getDashboard() {
        return this.embed;
    }
    ngOnInit() {
        // Initialize PowerBI service instance variable from parent
        super.ngOnInit();
    }
    ngOnChanges(changes) {
        if (changes.embedConfig) {
            const prevEmbedConfig = changes.embedConfig.previousValue;
            // Check if the function is being called for the first time
            if (!prevEmbedConfig) {
                return;
            }
            // Input from parent get updated, thus call embedOrUpdateDashboard function
            this.embedOrUpdateDashboard(prevEmbedConfig);
        }
        // Set event handlers if available
        if (this.eventHandlers && this.embed) {
            super.setEventHandlers(this.embed, this.eventHandlers);
        }
    }
    ngAfterViewInit() {
        // Check if container exists on the UI
        if (this.containerRef.nativeElement) {
            // Decide to embed or bootstrap
            if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {
                this.embedDashboard();
            }
            else {
                this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);
            }
        }
        // Set event handlers if available
        if (this.eventHandlers && this.embed) {
            super.setEventHandlers(this.embed, this.eventHandlers);
        }
    }
    /**
     * Embed the PowerBI Dashboard
     *
     * @returns void
     */
    embedDashboard() {
        // Check if the HTML container is rendered and available
        if (!this.containerRef.nativeElement) {
            return;
        }
        this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);
    }
    /**
     * When component updates, choose to _embed_ the powerbi dashboard
     * or do nothing if the embedUrl and accessToken did not update in the new properties
     *
     * @param prevEmbedConfig IDashboardEmbedConfiguration
     * @returns void
     */
    embedOrUpdateDashboard(prevEmbedConfig) {
        // Check if Embed URL and Access Token are present in current properties
        if (!this.embedConfig.accessToken || !this.embedConfig.embedUrl) {
            return;
        }
        // Embed in the following scenario
        // Embed URL is updated (E.g. New dashboard is to be embedded)
        if (this.containerRef.nativeElement && this.embedConfig.embedUrl !== prevEmbedConfig.embedUrl) {
            this.embedDashboard();
        }
    }
}
PowerBIDashboardEmbedComponent.decorators = [
    { type: Component, args: [{
                selector: 'powerbi-dashboard[embedConfig]',
                template: '<div class={{cssClassName}} #dashboardContainer></div>'
            },] }
];
PowerBIDashboardEmbedComponent.ctorParameters = () => [];
PowerBIDashboardEmbedComponent.propDecorators = {
    embedConfig: [{ type: Input }],
    eventHandlers: [{ type: Input }],
    containerRef: [{ type: ViewChild, args: ['dashboardContainer',] }]
};
//# sourceMappingURL=data:application/json;base64,