// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { Component, Input } from '@angular/core';
import { factories, service } from 'powerbi-client';
import { stringifyMap, sdkType, sdkWrapperVersion } from '../../utils/utils';
/**
 * Base component to hold common properties for all the Power BI entities
 */
export class PowerBIEmbedComponent {
    constructor() {
        // JSON stringify of prev event handler map
        this.prevEventHandlerMapString = '';
    }
    ngOnInit() {
        // Initialize powerbi variable for child component
        if (this.service) {
            this.powerbi = this.service;
        }
        else {
            this.powerbi = new service.Service(factories.hpmFactory, factories.wpmpFactory, factories.routerFactory);
        }
        this.powerbi.setSdkInfo(sdkType, sdkWrapperVersion);
    }
    /**
     * Sets all event handlers from the input on the embedded entity
     *
     * @param embed Embedded object
     * @param eventHandlerMap Array of event handlers to be set on embedded entity
     * @returns void
     */
    setEventHandlers(embed, eventHandlerMap) {
        // Get string representation of eventHandlerMap
        const eventHandlerMapString = stringifyMap(eventHandlerMap);
        // Check if event handler map changed
        if (this.prevEventHandlerMapString === eventHandlerMapString) {
            return;
        }
        // Update prev string representation of event handler map
        this.prevEventHandlerMapString = eventHandlerMapString;
        // Apply all provided event handlers
        eventHandlerMap.forEach((eventHandlerMethod, eventName) => {
            // Removes event handler for this event
            embed.off(eventName);
            // Event handler is effectively removed for this event when eventHandlerMethod is null
            if (eventHandlerMethod) {
                // Set single event handler
                embed.on(eventName, (event) => {
                    eventHandlerMethod(event, embed);
                });
            }
        });
    }
}
PowerBIEmbedComponent.decorators = [
    { type: Component, args: [{
                selector: 'powerbi-embed',
                template: ''
            },] }
];
PowerBIEmbedComponent.propDecorators = {
    cssClassName: [{ type: Input }],
    service: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG93ZXJiaS1lbWJlZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wb3dlcmJpLWNsaWVudC1hbmd1bGFyL3NyYy9jb21wb25lbnRzL3Bvd2VyYmktZW1iZWQvcG93ZXJiaS1lbWJlZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUVsQyxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQVMsU0FBUyxFQUFFLE9BQU8sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNELE9BQU8sRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFPN0U7O0dBRUc7QUFLSCxNQUFNLE9BQU8scUJBQXFCO0lBSmxDO1FBZUUsMkNBQTJDO1FBQ25DLDhCQUF5QixHQUFHLEVBQUUsQ0FBQztJQThDekMsQ0FBQztJQTVDQyxRQUFRO1FBQ04sa0RBQWtEO1FBQ2xELElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7U0FDN0I7YUFBTTtZQUNMLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDMUc7UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ08sZ0JBQWdCLENBQUMsS0FBWSxFQUFFLGVBQWlEO1FBQ3hGLCtDQUErQztRQUMvQyxNQUFNLHFCQUFxQixHQUFHLFlBQVksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUU1RCxxQ0FBcUM7UUFDckMsSUFBSSxJQUFJLENBQUMseUJBQXlCLEtBQUsscUJBQXFCLEVBQUU7WUFDNUQsT0FBTztTQUNSO1FBRUQseURBQXlEO1FBQ3pELElBQUksQ0FBQyx5QkFBeUIsR0FBRyxxQkFBcUIsQ0FBQztRQUV2RCxvQ0FBb0M7UUFDcEMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLGtCQUFrQixFQUFFLFNBQVMsRUFBRSxFQUFFO1lBQ3hELHVDQUF1QztZQUN2QyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRXJCLHNGQUFzRjtZQUN0RixJQUFJLGtCQUFrQixFQUFFO2dCQUN0QiwyQkFBMkI7Z0JBQzNCLEtBQUssQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBZ0MsRUFBUSxFQUFFO29CQUM3RCxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQ25DLENBQUMsQ0FBQyxDQUFDO2FBQ0o7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7OztZQTdERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGVBQWU7Z0JBQ3pCLFFBQVEsRUFBRSxFQUFFO2FBQ2I7OzsyQkFJRSxLQUFLO3NCQUdMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG5cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEVtYmVkLCBmYWN0b3JpZXMsIHNlcnZpY2UgfSBmcm9tICdwb3dlcmJpLWNsaWVudCc7XHJcbmltcG9ydCB7IHN0cmluZ2lmeU1hcCwgc2RrVHlwZSwgc2RrV3JhcHBlclZlcnNpb24gfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgZXZlbnQgaGFuZGxlciBmdW5jdGlvbiBvZiBlbWJlZGRlZCBlbnRpdHlcclxuICovXHJcbmV4cG9ydCB0eXBlIEV2ZW50SGFuZGxlciA9IChldmVudD86IHNlcnZpY2UuSUN1c3RvbUV2ZW50PGFueT4sIGVtYmVkZGVkRW50aXR5PzogRW1iZWQpID0+IHZvaWQgfCBudWxsO1xyXG5cclxuLyoqXHJcbiAqIEJhc2UgY29tcG9uZW50IHRvIGhvbGQgY29tbW9uIHByb3BlcnRpZXMgZm9yIGFsbCB0aGUgUG93ZXIgQkkgZW50aXRpZXNcclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAncG93ZXJiaS1lbWJlZCcsXHJcbiAgdGVtcGxhdGU6ICcnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUG93ZXJCSUVtYmVkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICAvLyBJbnB1dCgpIHNwZWNpZnkgdGhlIHByb3BlcnRpZXMgdGhhdCB3aWxsIGJlIHBhc3NlZCBmcm9tIHRoZSBwYXJlbnRcclxuICAvLyBDU1MgY2xhc3MgdG8gYmUgc2V0IG9uIHRoZSBlbWJlZGRpbmcgY29udGFpbmVyIChPcHRpb25hbClcclxuICBASW5wdXQoKSBjc3NDbGFzc05hbWU/OiBzdHJpbmc7XHJcblxyXG4gIC8vIFByb3ZpZGUgYSBjdXN0b20gaW1wbGVtZW50YXRpb24gb2YgUG93ZXIgQkkgc2VydmljZSAoT3B0aW9uYWwpXHJcbiAgQElucHV0KCkgc2VydmljZT86IHNlcnZpY2UuU2VydmljZTtcclxuXHJcbiAgLy8gUG93ZXIgQkkgc2VydmljZVxyXG4gIHBvd2VyYmkhOiBzZXJ2aWNlLlNlcnZpY2U7XHJcblxyXG4gIC8vIEpTT04gc3RyaW5naWZ5IG9mIHByZXYgZXZlbnQgaGFuZGxlciBtYXBcclxuICBwcml2YXRlIHByZXZFdmVudEhhbmRsZXJNYXBTdHJpbmcgPSAnJztcclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAvLyBJbml0aWFsaXplIHBvd2VyYmkgdmFyaWFibGUgZm9yIGNoaWxkIGNvbXBvbmVudFxyXG4gICAgaWYgKHRoaXMuc2VydmljZSkge1xyXG4gICAgICB0aGlzLnBvd2VyYmkgPSB0aGlzLnNlcnZpY2U7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnBvd2VyYmkgPSBuZXcgc2VydmljZS5TZXJ2aWNlKGZhY3Rvcmllcy5ocG1GYWN0b3J5LCBmYWN0b3JpZXMud3BtcEZhY3RvcnksIGZhY3Rvcmllcy5yb3V0ZXJGYWN0b3J5KTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnBvd2VyYmkuc2V0U2RrSW5mbyhzZGtUeXBlLCBzZGtXcmFwcGVyVmVyc2lvbik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIGFsbCBldmVudCBoYW5kbGVycyBmcm9tIHRoZSBpbnB1dCBvbiB0aGUgZW1iZWRkZWQgZW50aXR5XHJcbiAgICpcclxuICAgKiBAcGFyYW0gZW1iZWQgRW1iZWRkZWQgb2JqZWN0XHJcbiAgICogQHBhcmFtIGV2ZW50SGFuZGxlck1hcCBBcnJheSBvZiBldmVudCBoYW5kbGVycyB0byBiZSBzZXQgb24gZW1iZWRkZWQgZW50aXR5XHJcbiAgICogQHJldHVybnMgdm9pZFxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBzZXRFdmVudEhhbmRsZXJzKGVtYmVkOiBFbWJlZCwgZXZlbnRIYW5kbGVyTWFwOiBNYXA8c3RyaW5nLCBFdmVudEhhbmRsZXIgfCBudWxsPik6IHZvaWQge1xyXG4gICAgLy8gR2V0IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBldmVudEhhbmRsZXJNYXBcclxuICAgIGNvbnN0IGV2ZW50SGFuZGxlck1hcFN0cmluZyA9IHN0cmluZ2lmeU1hcChldmVudEhhbmRsZXJNYXApO1xyXG5cclxuICAgIC8vIENoZWNrIGlmIGV2ZW50IGhhbmRsZXIgbWFwIGNoYW5nZWRcclxuICAgIGlmICh0aGlzLnByZXZFdmVudEhhbmRsZXJNYXBTdHJpbmcgPT09IGV2ZW50SGFuZGxlck1hcFN0cmluZykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVXBkYXRlIHByZXYgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGV2ZW50IGhhbmRsZXIgbWFwXHJcbiAgICB0aGlzLnByZXZFdmVudEhhbmRsZXJNYXBTdHJpbmcgPSBldmVudEhhbmRsZXJNYXBTdHJpbmc7XHJcblxyXG4gICAgLy8gQXBwbHkgYWxsIHByb3ZpZGVkIGV2ZW50IGhhbmRsZXJzXHJcbiAgICBldmVudEhhbmRsZXJNYXAuZm9yRWFjaCgoZXZlbnRIYW5kbGVyTWV0aG9kLCBldmVudE5hbWUpID0+IHtcclxuICAgICAgLy8gUmVtb3ZlcyBldmVudCBoYW5kbGVyIGZvciB0aGlzIGV2ZW50XHJcbiAgICAgIGVtYmVkLm9mZihldmVudE5hbWUpO1xyXG5cclxuICAgICAgLy8gRXZlbnQgaGFuZGxlciBpcyBlZmZlY3RpdmVseSByZW1vdmVkIGZvciB0aGlzIGV2ZW50IHdoZW4gZXZlbnRIYW5kbGVyTWV0aG9kIGlzIG51bGxcclxuICAgICAgaWYgKGV2ZW50SGFuZGxlck1ldGhvZCkge1xyXG4gICAgICAgIC8vIFNldCBzaW5nbGUgZXZlbnQgaGFuZGxlclxyXG4gICAgICAgIGVtYmVkLm9uKGV2ZW50TmFtZSwgKGV2ZW50OiBzZXJ2aWNlLklDdXN0b21FdmVudDxhbnk+KTogdm9pZCA9PiB7XHJcbiAgICAgICAgICBldmVudEhhbmRsZXJNZXRob2QoZXZlbnQsIGVtYmVkKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==