// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { Component, Input, ViewChild } from '@angular/core';
import { PowerBIEmbedComponent } from '../powerbi-embed/powerbi-embed.component';
/**
 * Report component to embed the report, extends the Base Component
 */
export class PowerBIReportEmbedComponent extends PowerBIEmbedComponent {
    constructor() {
        super();
        // Phased embedding flag (Optional)
        this.phasedEmbedding = false;
    }
    // Getter for this._embed
    get embed() {
        return this._embed;
    }
    // Setter for this._embed
    set embed(newEmbedInstance) {
        this._embed = newEmbedInstance;
    }
    // Returns embed object to calling function
    getReport() {
        return this._embed;
    }
    ngOnInit() {
        // Initialize PowerBI service instance variable from parent
        super.ngOnInit();
    }
    ngOnChanges(changes) {
        if (changes.embedConfig) {
            const prevEmbedConfig = changes.embedConfig.previousValue;
            // Check if the function is being called for the first time
            if (!prevEmbedConfig) {
                return;
            }
            // Input from parent get updated, thus call embedOrUpdateReport function
            this.embedOrUpdateReport(prevEmbedConfig);
        }
        // Set event handlers if available
        if (this.eventHandlers && this.embed) {
            super.setEventHandlers(this.embed, this.eventHandlers);
        }
    }
    ngAfterViewInit() {
        // Check if container exists on the UI
        if (this.containerRef.nativeElement) {
            // Decide to embed, load or bootstrap
            if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {
                this.embedReport();
            }
            else {
                this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);
            }
        }
        // Set event handlers if available
        if (this.eventHandlers && this.embed) {
            super.setEventHandlers(this.embed, this.eventHandlers);
        }
    }
    /**
     * Embed or load the PowerBI Report based on phasedEmbedding flag
     *
     * @returns void
     */
    embedReport() {
        // Check if the HTML container is rendered and available
        if (!this.containerRef.nativeElement) {
            return;
        }
        // Load when phasedEmbedding flag is true, embed otherwise
        if (this.phasedEmbedding) {
            this.embed = this.powerbi.load(this.containerRef.nativeElement, this.embedConfig);
        }
        else {
            this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);
        }
    }
    /**
     * When component updates, choose to _embed_ or _load_ the powerbi report
     * or do nothing if the embedUrl and accessToken did not update in the new properties
     *
     * @param prevEmbedConfig IReportEmbedConfiguration
     * @returns void
     */
    embedOrUpdateReport(prevEmbedConfig) {
        // Check if Embed URL and Access Token are present in current properties
        if (!this.embedConfig.accessToken || !this.embedConfig.embedUrl) {
            return;
        }
        // Embed or load in the following scenario
        // Embed URL is updated (E.g. New report is to be embedded)
        if (this.containerRef.nativeElement && this.embedConfig.embedUrl !== prevEmbedConfig.embedUrl) {
            this.embedReport();
        }
    }
}
PowerBIReportEmbedComponent.decorators = [
    { type: Component, args: [{
                selector: 'powerbi-report[embedConfig]',
                template: '<div class={{cssClassName}} #reportContainer></div>'
            },] }
];
PowerBIReportEmbedComponent.ctorParameters = () => [];
PowerBIReportEmbedComponent.propDecorators = {
    embedConfig: [{ type: Input }],
    phasedEmbedding: [{ type: Input }],
    eventHandlers: [{ type: Input }],
    containerRef: [{ type: ViewChild, args: ['reportContainer',] }]
};
//# sourceMappingURL=data:application/json;base64,