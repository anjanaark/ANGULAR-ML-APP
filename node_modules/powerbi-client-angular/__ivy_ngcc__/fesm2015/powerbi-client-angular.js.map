{"version":3,"file":"powerbi-client-angular.js","sources":["../../../powerbi-client-angular/src/utils/utils.ts","../../../powerbi-client-angular/src/components/powerbi-embed/powerbi-embed.component.ts","../../../powerbi-client-angular/src/components/powerbi-report-embed/powerbi-report-embed.component.ts","../../../powerbi-client-angular/src/components/powerbi-dashboard-embed/powerbi-dashboard-embed.component.ts","../../../powerbi-client-angular/src/components/powerbi-tile-embed/powerbi-tile-embed.component.ts","../../../powerbi-client-angular/src/components/powerbi-paginated-report-embed/powerbi-paginated-report-embed.component.ts","../../../powerbi-client-angular/src/components/powerbi-visual-embed/powerbi-visual-embed.component.ts","../../../powerbi-client-angular/src/components/powerbi-qna-embed/powerbi-qna-embed.component.ts","../../../powerbi-client-angular/src/powerbi-embed.module.ts","../../../powerbi-client-angular/src/public-api.ts","../../../powerbi-client-angular/src/powerbi-client-angular.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { EventHandler } from '../components/powerbi-embed/powerbi-embed.component';\r\n\r\n/**\r\n * Get JSON string representation of the given map.\r\n *\r\n * @param map Map of event and corresponding handler method\r\n *\r\n */\r\nexport const stringifyMap = (map: Map<string, EventHandler | null> | undefined): string => {\r\n  // Return empty string for empty/null map\r\n  if (!map) {\r\n    return '';\r\n  }\r\n\r\n  // Get entries of map as array\r\n  const mapEntries = Array.from(map);\r\n\r\n  // Return JSON string\r\n  return JSON.stringify(\r\n    mapEntries.map((mapEntry) =>\r\n      // Convert event handler method to a string containing its source code for comparison\r\n      [mapEntry[0], mapEntry[1] ? mapEntry[1].toString() : '']\r\n    )\r\n  );\r\n};\r\n\r\n// SDK information to be used with service instance\r\nexport const sdkType = 'powerbi-client-angular';\r\nexport const sdkWrapperVersion = '2.0.1';\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { Component, Input, OnInit } from '@angular/core';\r\nimport { Embed, factories, service } from 'powerbi-client';\r\nimport { stringifyMap, sdkType, sdkWrapperVersion } from '../../utils/utils';\r\n\r\n/**\r\n * Type for event handler function of embedded entity\r\n */\r\nexport type EventHandler = (event?: service.ICustomEvent<any>, embeddedEntity?: Embed) => void | null;\r\n\r\n/**\r\n * Base component to hold common properties for all the Power BI entities\r\n */\r\n@Component({\r\n  selector: 'powerbi-embed',\r\n  template: '',\r\n})\r\nexport class PowerBIEmbedComponent implements OnInit {\r\n  // Input() specify the properties that will be passed from the parent\r\n  // CSS class to be set on the embedding container (Optional)\r\n  @Input() cssClassName?: string;\r\n\r\n  // Provide a custom implementation of Power BI service (Optional)\r\n  @Input() service?: service.Service;\r\n\r\n  // Power BI service\r\n  powerbi!: service.Service;\r\n\r\n  // JSON stringify of prev event handler map\r\n  private prevEventHandlerMapString = '';\r\n\r\n  ngOnInit(): void {\r\n    // Initialize powerbi variable for child component\r\n    if (this.service) {\r\n      this.powerbi = this.service;\r\n    } else {\r\n      this.powerbi = new service.Service(factories.hpmFactory, factories.wpmpFactory, factories.routerFactory);\r\n    }\r\n\r\n    this.powerbi.setSdkInfo(sdkType, sdkWrapperVersion);\r\n  }\r\n\r\n  /**\r\n   * Sets all event handlers from the input on the embedded entity\r\n   *\r\n   * @param embed Embedded object\r\n   * @param eventHandlerMap Array of event handlers to be set on embedded entity\r\n   * @returns void\r\n   */\r\n  protected setEventHandlers(embed: Embed, eventHandlerMap: Map<string, EventHandler | null>): void {\r\n    // Get string representation of eventHandlerMap\r\n    const eventHandlerMapString = stringifyMap(eventHandlerMap);\r\n\r\n    // Check if event handler map changed\r\n    if (this.prevEventHandlerMapString === eventHandlerMapString) {\r\n      return;\r\n    }\r\n\r\n    // Update prev string representation of event handler map\r\n    this.prevEventHandlerMapString = eventHandlerMapString;\r\n\r\n    // Apply all provided event handlers\r\n    eventHandlerMap.forEach((eventHandlerMethod, eventName) => {\r\n      // Removes event handler for this event\r\n      embed.off(eventName);\r\n\r\n      // Event handler is effectively removed for this event when eventHandlerMethod is null\r\n      if (eventHandlerMethod) {\r\n        // Set single event handler\r\n        embed.on(eventName, (event: service.ICustomEvent<any>): void => {\r\n          eventHandlerMethod(event, embed);\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { AfterViewInit, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { Embed, IReportEmbedConfiguration, Report } from 'powerbi-client';\r\nimport { EventHandler, PowerBIEmbedComponent } from '../powerbi-embed/powerbi-embed.component';\r\n\r\n/**\r\n * Report component to embed the report, extends the Base Component\r\n */\r\n@Component({\r\n  selector: 'powerbi-report[embedConfig]',\r\n  template: '<div class={{cssClassName}} #reportContainer></div>',\r\n})\r\nexport class PowerBIReportEmbedComponent extends PowerBIEmbedComponent implements OnInit, OnChanges, AfterViewInit {\r\n  // Input() specify properties that will be passed from parent\r\n  // Configuration for embedding the PowerBI Report (Required)\r\n  @Input() embedConfig!: IReportEmbedConfiguration;\r\n\r\n  // Phased embedding flag (Optional)\r\n  @Input() phasedEmbedding?: boolean = false;\r\n\r\n  // Map of event name and handler methods pairs to be triggered on the event (Optional)\r\n  @Input() eventHandlers?: Map<string, EventHandler | null>;\r\n\r\n  // Ref to the HTML div container element\r\n  @ViewChild('reportContainer') private containerRef!: ElementRef<HTMLDivElement>;\r\n\r\n  // Embedded entity\r\n  // Note: Do not read or assign to this member variable directly, instead use the getter and setter\r\n  private _embed?: Embed;\r\n\r\n  // Getter for this._embed\r\n  private get embed(): Embed | undefined {\r\n    return this._embed;\r\n  }\r\n\r\n  // Setter for this._embed\r\n  private set embed(newEmbedInstance: Embed | undefined) {\r\n    this._embed = newEmbedInstance;\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  // Returns embed object to calling function\r\n  getReport(): Report {\r\n    return this._embed as Report;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Initialize PowerBI service instance variable from parent\r\n    super.ngOnInit();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.embedConfig) {\r\n      const prevEmbedConfig = changes.embedConfig.previousValue as IReportEmbedConfiguration;\r\n\r\n      // Check if the function is being called for the first time\r\n      if (!prevEmbedConfig) {\r\n        return;\r\n      }\r\n\r\n      // Input from parent get updated, thus call embedOrUpdateReport function\r\n      this.embedOrUpdateReport(prevEmbedConfig);\r\n    }\r\n\r\n    // Set event handlers if available\r\n    if (this.eventHandlers && this.embed) {\r\n      super.setEventHandlers(this.embed, this.eventHandlers);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Check if container exists on the UI\r\n    if (this.containerRef.nativeElement) {\r\n      // Decide to embed, load or bootstrap\r\n      if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {\r\n        this.embedReport();\r\n      } else {\r\n        this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);\r\n      }\r\n    }\r\n\r\n    // Set event handlers if available\r\n    if (this.eventHandlers && this.embed) {\r\n      super.setEventHandlers(this.embed, this.eventHandlers);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Embed or load the PowerBI Report based on phasedEmbedding flag\r\n   *\r\n   * @returns void\r\n   */\r\n  private embedReport(): void {\r\n    // Check if the HTML container is rendered and available\r\n    if (!this.containerRef.nativeElement) {\r\n      return;\r\n    }\r\n\r\n    // Load when phasedEmbedding flag is true, embed otherwise\r\n    if (this.phasedEmbedding) {\r\n      this.embed = this.powerbi.load(this.containerRef.nativeElement, this.embedConfig);\r\n    } else {\r\n      this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When component updates, choose to _embed_ or _load_ the powerbi report\r\n   * or do nothing if the embedUrl and accessToken did not update in the new properties\r\n   *\r\n   * @param prevEmbedConfig IReportEmbedConfiguration\r\n   * @returns void\r\n   */\r\n  private embedOrUpdateReport(prevEmbedConfig: IReportEmbedConfiguration): void {\r\n    // Check if Embed URL and Access Token are present in current properties\r\n    if (!this.embedConfig.accessToken || !this.embedConfig.embedUrl) {\r\n      return;\r\n    }\r\n\r\n    // Embed or load in the following scenario\r\n    // Embed URL is updated (E.g. New report is to be embedded)\r\n    if (this.containerRef.nativeElement && this.embedConfig.embedUrl !== prevEmbedConfig.embedUrl) {\r\n      this.embedReport();\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { AfterViewInit, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { Dashboard, Embed, IDashboardEmbedConfiguration } from 'powerbi-client';\r\nimport { EventHandler, PowerBIEmbedComponent } from '../powerbi-embed/powerbi-embed.component';\r\n\r\n/**\r\n * Dashboard component to embed the dashboard, extends the Base component\r\n */\r\n@Component({\r\n  selector: 'powerbi-dashboard[embedConfig]',\r\n  template: '<div class={{cssClassName}} #dashboardContainer></div>',\r\n})\r\nexport class PowerBIDashboardEmbedComponent extends PowerBIEmbedComponent implements OnInit, OnChanges, AfterViewInit {\r\n  // Input() specify properties that will be passed from parent\r\n  // Configuration for embedding the PowerBI Dashboard (Required)\r\n  @Input() embedConfig!: IDashboardEmbedConfiguration;\r\n\r\n  // Map of event name and handler methods pairs to be triggered on the event (Optional)\r\n  @Input() eventHandlers?: Map<string, EventHandler | null>;\r\n\r\n  // Ref to the HTML div container element\r\n  @ViewChild('dashboardContainer') private containerRef!: ElementRef<HTMLDivElement>;\r\n\r\n  // Embedded entity\r\n  // Note: Do not read or assign to this member variable directly, instead use the getter and setter\r\n  private _embed?: Embed;\r\n\r\n  // Getter for this._embed\r\n  private get embed(): Embed | undefined {\r\n    return this._embed;\r\n  }\r\n\r\n  // Setter for this._embed\r\n  private set embed(newEmbedInstance: Embed | undefined) {\r\n    this._embed = newEmbedInstance;\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  // Returns embed object to calling function\r\n  getDashboard(): Dashboard {\r\n    return this.embed as Dashboard;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Initialize PowerBI service instance variable from parent\r\n    super.ngOnInit();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.embedConfig) {\r\n      const prevEmbedConfig = changes.embedConfig.previousValue as IDashboardEmbedConfiguration;\r\n\r\n      // Check if the function is being called for the first time\r\n      if (!prevEmbedConfig) {\r\n        return;\r\n      }\r\n\r\n      // Input from parent get updated, thus call embedOrUpdateDashboard function\r\n      this.embedOrUpdateDashboard(prevEmbedConfig);\r\n    }\r\n\r\n    // Set event handlers if available\r\n    if (this.eventHandlers && this.embed) {\r\n      super.setEventHandlers(this.embed, this.eventHandlers);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Check if container exists on the UI\r\n    if (this.containerRef.nativeElement) {\r\n      // Decide to embed or bootstrap\r\n      if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {\r\n        this.embedDashboard();\r\n      } else {\r\n        this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);\r\n      }\r\n    }\r\n\r\n    // Set event handlers if available\r\n    if (this.eventHandlers && this.embed) {\r\n      super.setEventHandlers(this.embed, this.eventHandlers);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Embed the PowerBI Dashboard\r\n   *\r\n   * @returns void\r\n   */\r\n  private embedDashboard(): void {\r\n    // Check if the HTML container is rendered and available\r\n    if (!this.containerRef.nativeElement) {\r\n      return;\r\n    }\r\n\r\n    this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\r\n  }\r\n\r\n  /**\r\n   * When component updates, choose to _embed_ the powerbi dashboard\r\n   * or do nothing if the embedUrl and accessToken did not update in the new properties\r\n   *\r\n   * @param prevEmbedConfig IDashboardEmbedConfiguration\r\n   * @returns void\r\n   */\r\n  private embedOrUpdateDashboard(prevEmbedConfig: IDashboardEmbedConfiguration): void {\r\n    // Check if Embed URL and Access Token are present in current properties\r\n    if (!this.embedConfig.accessToken || !this.embedConfig.embedUrl) {\r\n      return;\r\n    }\r\n\r\n    // Embed in the following scenario\r\n    // Embed URL is updated (E.g. New dashboard is to be embedded)\r\n    if (this.containerRef.nativeElement && this.embedConfig.embedUrl !== prevEmbedConfig.embedUrl) {\r\n      this.embedDashboard();\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { AfterViewInit, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { Embed, ITileEmbedConfiguration, Tile } from 'powerbi-client';\r\nimport { EventHandler, PowerBIEmbedComponent } from '../powerbi-embed/powerbi-embed.component';\r\n\r\n/**\r\n * Tile component to embed the tile, extends Base component\r\n */\r\n@Component({\r\n  selector: 'powerbi-tile[embedConfig]',\r\n  template: '<div class={{cssClassName}} #tileContainer></div>',\r\n})\r\nexport class PowerBITileEmbedComponent extends PowerBIEmbedComponent implements OnInit, OnChanges, AfterViewInit {\r\n  // Input() specify properties that will be passed from parent\r\n  // Configuration for embedding the PowerBI Tile (Required)\r\n  @Input() embedConfig!: ITileEmbedConfiguration;\r\n\r\n  // Map of event name and handler methods pairs to be triggered on the event (Optional)\r\n  @Input() eventHandlers?: Map<string, EventHandler | null>;\r\n\r\n  // Ref to the HTML div container element\r\n  @ViewChild('tileContainer') private containerRef!: ElementRef<HTMLDivElement>;\r\n\r\n  // Embedded entity\r\n  // Note: Do not read or assign to this member variable directly, instead use the getter and setter\r\n  private _embed?: Embed;\r\n\r\n  // Getter for this._embed\r\n  private get embed(): Embed | undefined {\r\n    return this._embed;\r\n  }\r\n\r\n  // Setter for this._embed\r\n  private set embed(newEmbedInstance: Embed | undefined) {\r\n    this._embed = newEmbedInstance;\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  // Returns embed object to calling function\r\n  getTile(): Tile {\r\n    return this._embed as Tile;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Initialize PowerBI service instance variable from parent\r\n    super.ngOnInit();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.embedConfig) {\r\n      const prevEmbedConfig = changes.embedConfig.previousValue as ITileEmbedConfiguration;\r\n\r\n      // Check if the function is being called for the first time\r\n      if (!prevEmbedConfig) {\r\n        return;\r\n      }\r\n\r\n      // Input from parent get updated, thus call embedOrUpdateDashboard function\r\n      this.embedOrUpdateTile(prevEmbedConfig);\r\n    }\r\n\r\n    // Set event handlers if available\r\n    if (this.eventHandlers && this.embed) {\r\n      super.setEventHandlers(this.embed, this.eventHandlers);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Check if container exists on the UI\r\n    if (this.containerRef.nativeElement) {\r\n      // Decide to embed or bootstrap\r\n      if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {\r\n        this.embedTile();\r\n      } else {\r\n        this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);\r\n      }\r\n    }\r\n\r\n    // Set event handlers if available\r\n    if (this.eventHandlers && this.embed) {\r\n      super.setEventHandlers(this.embed, this.eventHandlers);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Embed the PowerBI Tile\r\n   *\r\n   * @returns void\r\n   */\r\n  private embedTile(): void {\r\n    // Check if the HTML container is rendered and available\r\n    if (!this.containerRef.nativeElement) {\r\n      return;\r\n    }\r\n\r\n    this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\r\n  }\r\n\r\n  /**\r\n   * When component updates, choose to _embed_ the powerbi tile\r\n   * or do nothing if the embedUrl and accessToken did not update in the new properties\r\n   *\r\n   * @param prevEmbedConfig ITileEmbedConfiguration\r\n   * @returns void\r\n   */\r\n  private embedOrUpdateTile(prevEmbedConfig: ITileEmbedConfiguration): void {\r\n    // Check if Embed URL and Access Token are present in current properties\r\n    if (!this.embedConfig.accessToken || !this.embedConfig.embedUrl) {\r\n      return;\r\n    }\r\n\r\n    // Embed in the following scenario\r\n    // Embed URL is updated (E.g. New tile is to be embedded)\r\n    if (this.containerRef.nativeElement && this.embedConfig.embedUrl !== prevEmbedConfig.embedUrl) {\r\n      this.embedTile();\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { AfterViewInit, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { Embed, IEmbedConfiguration } from 'powerbi-client';\r\nimport { PowerBIEmbedComponent } from '../powerbi-embed/powerbi-embed.component';\r\n\r\n/**\r\n * Paginated report component to embed the entity, extends the Base component\r\n */\r\n@Component({\r\n  selector: 'powerbi-paginated-report[embedConfig]',\r\n  template: '<div class={{cssClassName}} #paginatedReportContainer></div>',\r\n})\r\nexport class PowerBIPaginatedReportEmbedComponent extends PowerBIEmbedComponent implements OnInit, OnChanges, AfterViewInit {\r\n  // Input() specify properties that will be passed from parent\r\n  // Configuration for embedding the PowerBI Paginated report (Required)\r\n  @Input() embedConfig!: IEmbedConfiguration;\r\n\r\n  // Ref to the HTML div container element\r\n  @ViewChild('paginatedReportContainer') private containerRef!: ElementRef<HTMLDivElement>;\r\n\r\n  // Embedded entity\r\n  // Note: Do not read or assign to this member variable directly, instead use the getter and setter\r\n  private _embed?: Embed;\r\n\r\n  // Getter for this._embed\r\n  private get embed(): Embed | undefined {\r\n    return this._embed;\r\n  }\r\n\r\n  // Setter for this._embed\r\n  private set embed(newEmbedInstance: Embed | undefined) {\r\n    this._embed = newEmbedInstance;\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Initialize PowerBI service instance variable from parent\r\n    super.ngOnInit();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.embedConfig) {\r\n      const prevEmbedConfig = changes.embedConfig.previousValue as IEmbedConfiguration;\r\n\r\n      // Check if the function is being called for the first time\r\n      if (!prevEmbedConfig) {\r\n        return;\r\n      }\r\n\r\n      // Input from parent get updated, thus call embedOrUpdateDashboard function\r\n      this.embedOrUpdatedPaginatedReport(prevEmbedConfig);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Check if container exists on the UI\r\n    if (this.containerRef.nativeElement) {\r\n      // Decide to embed\r\n      this.embedPaginatedReport();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Embed the PowerBI Paginated report\r\n   *\r\n   * @returns void\r\n   */\r\n  private embedPaginatedReport(): void {\r\n    // Check if the HTML container is rendered and available\r\n    if (!this.containerRef.nativeElement) {\r\n      return;\r\n    }\r\n\r\n    // Embed paginated report\r\n    this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\r\n  }\r\n\r\n  /**\r\n   * When component updates, choose to _embed_ the powerbi paginated report\r\n   * or do nothing if the embedUrl and accessToken did not update in the new properties\r\n   *\r\n   * @param prevEmbedConfig IEmbedConfiguration\r\n   * @returns void\r\n   */\r\n  private embedOrUpdatedPaginatedReport(prevEmbedConfig: IEmbedConfiguration): void {\r\n    // Check if Embed URL and Access Token are present in current properties\r\n    if (!this.embedConfig.accessToken || !this.embedConfig.embedUrl) {\r\n      return;\r\n    }\r\n\r\n    // Embed in the following scenario\r\n    // Embed URL is updated (E.g. New paginated report is to be embedded)\r\n    if (this.containerRef.nativeElement && this.embedConfig.embedUrl !== prevEmbedConfig.embedUrl) {\r\n      this.embedPaginatedReport();\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { AfterViewInit, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { Embed, IVisualEmbedConfiguration, Visual } from 'powerbi-client';\r\nimport { EventHandler, PowerBIEmbedComponent } from '../powerbi-embed/powerbi-embed.component';\r\n\r\n/**\r\n * Visual component to embed the visual, extends Base component\r\n */\r\n@Component({\r\n  selector: 'powerbi-visual[embedConfig]',\r\n  template: '<div class={{cssClassName}} #visualContainer></div>',\r\n})\r\nexport class PowerBIVisualEmbedComponent extends PowerBIEmbedComponent implements OnInit, OnChanges, AfterViewInit {\r\n  // Input() specify properties that will be passed from parent\r\n  // Configuration for embedding the PowerBI Visual (Required)\r\n  @Input() embedConfig!: IVisualEmbedConfiguration;\r\n\r\n  // Map of event name and handler methods pairs to be triggered on the event (Optional)\r\n  @Input() eventHandlers?: Map<string, EventHandler | null>;\r\n\r\n  // Ref to the HTML div container element\r\n  @ViewChild('visualContainer') private containerRef!: ElementRef<HTMLDivElement>;\r\n\r\n  // Embedded entity\r\n  // Note: Do not read or assign to this member variable directly, instead use the getter and setter\r\n  private _embed?: Embed;\r\n\r\n  // Getter for this._embed\r\n  private get embed(): Embed | undefined {\r\n    return this._embed;\r\n  }\r\n\r\n  // Setter for this._embed\r\n  private set embed(newEmbedInstance: Embed | undefined) {\r\n    this._embed = newEmbedInstance;\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  // Returns embed object to calling function\r\n  getVisual(): Visual {\r\n    return this._embed as Visual;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Initialize PowerBI service instance variable from parent\r\n    super.ngOnInit();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.embedConfig) {\r\n      const prevEmbedConfig = changes.embedConfig.previousValue as IVisualEmbedConfiguration;\r\n\r\n      // Check if the function is being called for the first time\r\n      if (!prevEmbedConfig) {\r\n        return;\r\n      }\r\n\r\n      // Input from parent get updated, thus call embedOrUpdateDashboard function\r\n      this.embedOrUpdateVisual(prevEmbedConfig);\r\n    }\r\n\r\n    // Set event handlers if available\r\n    if (this.eventHandlers && this.embed) {\r\n      super.setEventHandlers(this.embed, this.eventHandlers);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Check if container exists on the UI\r\n    if (this.containerRef.nativeElement) {\r\n      // Decide to embed or bootstrap\r\n      if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {\r\n        this.embedVisual();\r\n      } else {\r\n        this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);\r\n      }\r\n    }\r\n\r\n    // Set event handlers if available\r\n    if (this.eventHandlers && this.embed) {\r\n      super.setEventHandlers(this.embed, this.eventHandlers);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Embed the PowerBI Visual\r\n   *\r\n   * @returns void\r\n   */\r\n  private embedVisual(): void {\r\n    // Check if the HTML container is rendered and available\r\n    if (!this.containerRef.nativeElement) {\r\n      return;\r\n    }\r\n\r\n    this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\r\n  }\r\n\r\n  /**\r\n   * When component updates, choose to _embed_ the powerbi visual\r\n   * or do nothing if the embedUrl and accessToken did not update in the new properties\r\n   *\r\n   * @param prevEmbedConfig IVisualEmbedConfiguration\r\n   * @returns void\r\n   */\r\n  private embedOrUpdateVisual(prevEmbedConfig: IVisualEmbedConfiguration): void {\r\n    // Check if Embed URL and Access Token are present in current properties\r\n    if (!this.embedConfig.accessToken || !this.embedConfig.embedUrl) {\r\n      return;\r\n    }\r\n\r\n    // Embed in the following scenario\r\n    // Embed URL is updated (E.g. New visual is to be embedded)\r\n    if (this.containerRef.nativeElement && this.embedConfig.embedUrl !== prevEmbedConfig.embedUrl) {\r\n      this.embedVisual();\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { AfterViewInit, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { Embed, IQnaEmbedConfiguration, Qna } from 'powerbi-client';\r\nimport { EventHandler, PowerBIEmbedComponent } from '../powerbi-embed/powerbi-embed.component';\r\n\r\n/**\r\n * Qna component to embed the Qna visual, extends Base component\r\n */\r\n@Component({\r\n  selector: 'powerbi-qna[embedConfig]',\r\n  template: '<div class={{cssClassName}} #qnaContainer></div>',\r\n})\r\nexport class PowerBIQnaEmbedComponent extends PowerBIEmbedComponent implements OnInit, OnChanges, AfterViewInit {\r\n  // Input() specify properties that will be passed from parent\r\n  // Configuration for embedding the PowerBI Qna visual (Required)\r\n  @Input() embedConfig!: IQnaEmbedConfiguration;\r\n\r\n  // Map of event name and handler methods pairs to be triggered on the event (Optional)\r\n  @Input() eventHandlers?: Map<string, EventHandler | null>;\r\n\r\n  // Ref to the HTML div container element\r\n  @ViewChild('qnaContainer') private containerRef!: ElementRef<HTMLDivElement>;\r\n\r\n  // Embedded entity\r\n  // Note: Do not read or assign to this member variable directly, instead use the getter and setter\r\n  private _embed?: Embed;\r\n\r\n  // Getter for this._embed\r\n  private get embed(): Embed | undefined {\r\n    return this._embed;\r\n  }\r\n\r\n  // Setter for this._embed\r\n  private set embed(newEmbedInstance: Embed | undefined) {\r\n    this._embed = newEmbedInstance;\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  // Returns embed object to calling function\r\n  getQna(): Qna {\r\n    return this._embed as Qna;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Initialize PowerBI service instance variable from parent\r\n    super.ngOnInit();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.embedConfig) {\r\n      const prevEmbedConfig = changes.embedConfig.previousValue as IQnaEmbedConfiguration;\r\n\r\n      // Check if the function is being called for the first time\r\n      if (!prevEmbedConfig) {\r\n        return;\r\n      }\r\n\r\n      // Input from parent get updated, thus call embedOrUpdateDashboard function\r\n      this.embedOrUpdateQna(prevEmbedConfig);\r\n    }\r\n\r\n    // Set event handlers if available\r\n    if (this.eventHandlers && this.embed) {\r\n      super.setEventHandlers(this.embed, this.eventHandlers);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Check if container exists on the UI\r\n    if (this.containerRef.nativeElement) {\r\n      // Decide to embed or bootstrap\r\n      if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {\r\n        this.embedQnaVisual();\r\n      } else {\r\n        this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);\r\n      }\r\n    }\r\n\r\n    // Set event handlers if available\r\n    if (this.eventHandlers && this.embed) {\r\n      super.setEventHandlers(this.embed, this.eventHandlers);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Embed the PowerBI QnA Visual\r\n   *\r\n   * @returns void\r\n   */\r\n  private embedQnaVisual(): void {\r\n    // Check if the HTML container is rendered and available\r\n    if (!this.containerRef.nativeElement) {\r\n      return;\r\n    }\r\n\r\n    this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\r\n  }\r\n\r\n  /**\r\n   * When component updates, choose to _embed_ the powerbi qna visual\r\n   * or do nothing if the embedUrl and accessToken did not update in the new properties\r\n   *\r\n   * @param prevEmbedConfig IQnaEmbedConfiguration\r\n   * @returns void\r\n   */\r\n  private embedOrUpdateQna(prevEmbedConfig: IQnaEmbedConfiguration): void {\r\n    // Check if Embed URL and Access Token are present in current properties\r\n    if (!this.embedConfig.accessToken || !this.embedConfig.embedUrl) {\r\n      return;\r\n    }\r\n\r\n    // Embed in the following scenario\r\n    // Embed URL is updated (E.g. New Qna visual is to be embedded)\r\n    if (this.containerRef.nativeElement && this.embedConfig.embedUrl !== prevEmbedConfig.embedUrl) {\r\n      this.embedQnaVisual();\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { PowerBIEmbedComponent } from './components/powerbi-embed/powerbi-embed.component';\r\nimport { PowerBIDashboardEmbedComponent } from './components/powerbi-dashboard-embed/powerbi-dashboard-embed.component';\r\nimport { PowerBIPaginatedReportEmbedComponent } from './components/powerbi-paginated-report-embed/powerbi-paginated-report-embed.component';\r\nimport { PowerBIQnaEmbedComponent } from './components/powerbi-qna-embed/powerbi-qna-embed.component';\r\nimport { PowerBIReportEmbedComponent } from './components/powerbi-report-embed/powerbi-report-embed.component';\r\nimport { PowerBITileEmbedComponent } from './components/powerbi-tile-embed/powerbi-tile-embed.component';\r\nimport { PowerBIVisualEmbedComponent } from './components/powerbi-visual-embed/powerbi-visual-embed.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    PowerBIEmbedComponent,\r\n    PowerBIDashboardEmbedComponent,\r\n    PowerBIPaginatedReportEmbedComponent,\r\n    PowerBIQnaEmbedComponent,\r\n    PowerBIReportEmbedComponent,\r\n    PowerBITileEmbedComponent,\r\n    PowerBIVisualEmbedComponent,\r\n  ],\r\n  imports: [],\r\n  exports: [\r\n    PowerBIDashboardEmbedComponent,\r\n    PowerBIPaginatedReportEmbedComponent,\r\n    PowerBIQnaEmbedComponent,\r\n    PowerBIReportEmbedComponent,\r\n    PowerBITileEmbedComponent,\r\n    PowerBIVisualEmbedComponent,\r\n  ],\r\n})\r\nexport class PowerBIEmbedModule {}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n\r\n/*\r\n * Public API Surface of powerbi-client-angular\r\n */\r\n\r\nexport * from './components/powerbi-report-embed/powerbi-report-embed.component';\r\nexport * from './components/powerbi-dashboard-embed/powerbi-dashboard-embed.component';\r\nexport * from './components/powerbi-tile-embed/powerbi-tile-embed.component';\r\nexport * from './components/powerbi-paginated-report-embed/powerbi-paginated-report-embed.component';\r\nexport * from './components/powerbi-visual-embed/powerbi-visual-embed.component';\r\nexport * from './components/powerbi-qna-embed/powerbi-qna-embed.component';\r\nexport * from './powerbi-embed.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {PowerBIEmbedComponent as ɵa} from './components/powerbi-embed/powerbi-embed.component';"]}